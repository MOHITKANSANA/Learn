{
  "entities": {
    "Course": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Course",
      "type": "object",
      "description": "Represents a course offered on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the course."
        },
        "title": {
          "type": "string",
          "description": "Title of the course."
        },
        "description": {
          "type": "string",
          "description": "Description of the course."
        },
        "price": {
          "type": "number",
          "description": "Price of the course."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the course image."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "price",
        "imageUrl"
      ]
    },
    "EBook": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EBook",
      "type": "object",
      "description": "Represents an e-book available on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the e-book."
        },
        "title": {
          "type": "string",
          "description": "Title of the e-book."
        },
        "description": {
          "type": "string",
          "description": "Description of the e-book."
        },
        "price": {
          "type": "number",
          "description": "Price of the e-book."
        },
        "fileUrl": {
          "type": "string",
          "description": "URL of the e-book file."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the e-book image."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "price",
        "fileUrl",
        "imageUrl"
      ]
    },
    "TestSeries": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TestSeries",
      "type": "object",
      "description": "Represents a test series available on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the test series."
        },
        "title": {
          "type": "string",
          "description": "Title of the test series."
        },
        "description": {
          "type": "string",
          "description": "Description of the test series."
        },
        "price": {
          "type": "number",
          "description": "Price of the test series."
        },
        "questionIds": {
          "type": "array",
          "description": "List of question IDs associated with the test series.",
          "items": {
            "type": "string"
          }
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the test series image."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "price",
        "questionIds",
        "imageUrl"
      ]
    },
    "Question": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Question",
      "type": "object",
      "description": "Represents a question within a test series.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the question."
        },
        "text": {
          "type": "string",
          "description": "Text of the question."
        },
        "options": {
          "type": "array",
          "description": "Available options for the question.",
          "items": {
            "type": "string"
          }
        },
        "correctAnswer": {
          "type": "string",
          "description": "The correct answer to the question."
        }
      },
      "required": [
        "id",
        "text",
        "options",
        "correctAnswer"
      ]
    },
    "Educator": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Educator",
      "type": "object",
      "description": "Represents an educator on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the educator."
        },
        "name": {
          "type": "string",
          "description": "Name of the educator."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the educator's image."
        }
      },
      "required": [
        "id",
        "name",
        "imageUrl"
      ]
    },
    "LiveClass": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LiveClass",
      "type": "object",
      "description": "Represents a live class scheduled on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the live class."
        },
        "title": {
          "type": "string",
          "description": "Title of the live class."
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the live class (ISO 8601 format).",
          "format": "date-time"
        },
        "educatorId": {
          "type": "string",
          "description": "Reference to the Educator giving this live class."
        },
        "youtubeUrl": {
          "type": "string",
          "description": "URL of the YouTube live stream."
        }
      },
      "required": [
        "id",
        "title",
        "startTime",
        "educatorId",
        "youtubeUrl"
      ]
    },
    "Enrollment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Enrollment",
      "type": "object",
      "description": "Represents a student's enrollment in a course, test series, or ebook.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the enrollment."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to the Student who is enrolled."
        },
        "itemId": {
          "type": "string",
          "description": "Reference to the Course, TestSeries, or EBook that the student is enrolling in."
        },
        "itemType": {
          "type": "string",
          "description": "Type of the item being enrolled in (e.g., 'course', 'testSeries', 'ebook')."
        },
        "enrollmentDate": {
          "type": "string",
          "description": "Date of enrollment (ISO 8601 format).",
          "format": "date-time"
        },
        "paymentScreenshotUrl": {
          "type": "string",
          "description": "URL of the payment screenshot uploaded by the student."
        },
        "isApproved": {
          "type": "boolean",
          "description": "Indicates whether the enrollment has been approved by an admin."
        }
      },
      "required": [
        "id",
        "studentId",
        "itemId",
        "itemType",
        "enrollmentDate",
        "paymentScreenshotUrl",
        "isApproved"
      ]
    },
    "Student": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Student",
      "type": "object",
      "description": "Represents a student using the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the student."
        },
        "name": {
          "type": "string",
          "description": "Name of the student."
        },
        "email": {
          "type": "string",
          "description": "Email address of the student.",
          "format": "email"
        },
        "profileImageUrl": {
          "type": "string",
          "description": "URL of the student's profile image."
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Promotion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Promotion",
      "type": "object",
      "description": "Represents a promotion displayed in the promotion scroller.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the promotion."
        },
        "text": {
          "type": "string",
          "description": "Text of the promotion message."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the promotion (ISO 8601 format).",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the promotion (ISO 8601 format).",
          "format": "date-time"
        },
        "courseId": {
          "type": "string",
          "description": "Reference to the Course that is being promoted. (Relationship: Promotion N:1 Course)"
        }
      },
      "required": [
        "id",
        "text",
        "startDate",
        "endDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/courses/{courseId}",
        "definition": {
          "entityName": "Course",
          "schema": {
            "$ref": "#/backend/entities/Course"
          },
          "description": "Stores course details. Accessible to all users for reading, but only admins can create, update, or delete. Includes all course information.",
          "params": [
            {
              "name": "courseId",
              "description": "Unique identifier for the course."
            }
          ]
        }
      },
      {
        "path": "/ebooks/{ebookId}",
        "definition": {
          "entityName": "EBook",
          "schema": {
            "$ref": "#/backend/entities/EBook"
          },
          "description": "Stores eBook details. Accessible to all users for reading, but only admins can create, update, or delete. Includes all eBook information.",
          "params": [
            {
              "name": "ebookId",
              "description": "Unique identifier for the e-book."
            }
          ]
        }
      },
      {
        "path": "/test_series/{testSeriesId}",
        "definition": {
          "entityName": "TestSeries",
          "schema": {
            "$ref": "#/backend/entities/TestSeries"
          },
          "description": "Stores test series details. Accessible to all users for reading, but only admins can create, update, or delete. Includes all test series information.",
          "params": [
            {
              "name": "testSeriesId",
              "description": "Unique identifier for the test series."
            }
          ]
        }
      },
      {
        "path": "/questions/{questionId}",
        "definition": {
          "entityName": "Question",
          "schema": {
            "$ref": "#/backend/entities/Question"
          },
          "description": "Stores individual question details. Accessible to admins for management.",
          "params": [
            {
              "name": "questionId",
              "description": "Unique identifier for the question."
            }
          ]
        }
      },
      {
        "path": "/educators/{educatorId}",
        "definition": {
          "entityName": "Educator",
          "schema": {
            "$ref": "#/backend/entities/Educator"
          },
          "description": "Stores educator details. Accessible to all users for reading, but only admins can create, update, or delete. Includes all educator information.",
          "params": [
            {
              "name": "educatorId",
              "description": "Unique identifier for the educator."
            }
          ]
        }
      },
      {
        "path": "/live_classes/{liveClassId}",
        "definition": {
          "entityName": "LiveClass",
          "schema": {
            "$ref": "#/backend/entities/LiveClass"
          },
          "description": "Stores live class details. Accessible to all users for reading, but only admins can create, update, or delete. Includes all live class information.",
          "params": [
            {
              "name": "liveClassId",
              "description": "Unique identifier for the live class."
            }
          ]
        }
      },
      {
        "path": "/users/{studentId}",
        "definition": {
          "entityName": "Student",
          "schema": {
            "$ref": "#/backend/entities/Student"
          },
          "description": "Stores student profile data. Only the student can read/write their own data.",
          "params": [
            {
              "name": "studentId",
              "description": "Unique identifier for the student, matching their Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "/promotions/{promotionId}",
        "definition": {
          "entityName": "Promotion",
          "schema": {
            "$ref": "#/backend/entities/Promotion"
          },
          "description": "Stores promotion details for the promotion scroller. Accessible to all users for reading, but only admins can create, update, or delete. Includes all promotion information.",
          "params": [
            {
              "name": "promotionId",
              "description": "Unique identifier for the promotion."
            }
          ]
        }
      },
      {
        "path": "/users/{studentId}/enrollments/{enrollmentId}",
        "definition": {
          "entityName": "Enrollment",
          "schema": {
            "$ref": "#/backend/entities/Enrollment"
          },
          "description": "Stores enrollment requests made by students. Includes denormalized 'studentId' for authorization. Only the student can create their own enrollment requests. Admins can approve or reject.",
          "params": [
            {
              "name": "studentId",
              "description": "Unique identifier for the student."
            },
            {
              "name": "enrollmentId",
              "description": "Unique identifier for the enrollment request."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the 'Learn with munedra' app, focusing on secure access, scalability, and maintainability. It incorporates denormalization for authorization independence and segregates data based on access needs. User-owned data (student profiles) are stored under `/users/{userId}`. Courses, eBooks, TestSeries, Questions, Educators, Promotions and LiveClasses are stored in root collections to allow global listing and admin management. Enrollment requests are stored in a subcollection to allow easy listing and management per user, along with details from the parent document being denormalized for authorization independence. This design ensures clear ownership, simplifies security rules, and optimizes query performance. The use of consistent naming conventions and explicit state modeling further enhances clarity and debuggability."
  }
}
    