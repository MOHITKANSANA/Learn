rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to the courses collection, while restricting writes.
     * @path /courses/{courseId}
     * @allow (get, list): Any user can read the course data.
     * @deny (create, update, delete): No user can create, update, or delete courses through direct Firestore access.
     * @principle Allows public access for reading course information.
     */
    match /courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the ebooks collection, while restricting writes.
     * @path /ebooks/{ebookId}
     * @allow (get, list): Any user can read the ebook data.
     * @deny (create, update, delete): No user can create, update, or delete ebooks through direct Firestore access.
     * @principle Allows public access for reading ebook information.
     */
    match /ebooks/{ebookId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the test_series collection, while restricting writes.
     * @path /test_series/{testSeriesId}
     * @allow (get, list): Any user can read the test series data.
     * @deny (create, update, delete): No user can create, update, or delete test series through direct Firestore access.
     * @principle Allows public access for reading test series information.
     */
    match /test_series/{testSeriesId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the questions collection, while restricting writes.
     * @path /questions/{questionId}
     * @allow (get, list): Any user can read the question data.
     * @deny (create, update, delete): No user can create, update, or delete questions through direct Firestore access.
     * @principle Allows public access for reading question information.
     */
    match /questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the educators collection, while restricting writes.
     * @path /educators/{educatorId}
     * @allow (get, list): Any user can read the educator data.
     * @deny (create, update, delete): No user can create, update, or delete educators through direct Firestore access.
     * @principle Allows public access for reading educator information.
     */
    match /educators/{educatorId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the live_classes collection, while restricting writes.
     * @path /live_classes/{liveClassId}
     * @allow (get, list): Any user can read the live class data.
     * @deny (create, update, delete): No user can create, update, or delete live classes through direct Firestore access.
     * @principle Allows public access for reading live class information.
     */
    match /live_classes/{liveClassId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing user-specific data.
     */
    match /users/{userId} {

      /**
       * @description Allows a user to read and write their own user document.
       * @path /users/{userId}
       * @allow (get, create, update, delete, list): Authenticated user with matching UID.
       * @deny: Unauthenticated user or mismatched UID.
       * @principle Enforces document ownership for user profiles.
       */
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Allows a user to manage their own cart items.
       * @path /users/{userId}/cart/{bookId}
       * @allow (get, create, update, delete, list): Authenticated user with matching UID.
       * @deny: Unauthenticated user or mismatched UID.
       * @principle Enforces document ownership for cart items.
       */
      match /cart/{bookId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }

    /**
     * @description Allows public read access to the promotions collection, while restricting writes.
     * @path /promotions/{promotionId}
     * @allow (get, list): Any user can read the promotion data.
     * @deny (create, update, delete): No user can create, update, or delete promotions through direct Firestore access.
     * @principle Allows public access for reading promotion information.
     */
    match /promotions/{promotionId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows access to the enrollments collection, while restricting writes.
     * @path /enrollments/{enrollmentId}
     */
    match /enrollments/{enrollmentId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the books collection, while restricting writes.
     * @path /books/{bookId}
     * @allow (get, list): Any user can read the book data.
     * @deny (create, update, delete): No user can create, update, or delete books through direct Firestore access.
     * @principle Allows public access for reading book information.
     */
    match /books/{bookId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing book orders.
     * @path /bookOrders/{orderId}
     */
    match /bookOrders/{orderId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing coupons.
     * @path /coupons/{couponId}
     */
    match /coupons/{couponId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the previousYearPapers collection, while restricting writes.
     * @path /previousYearPapers/{paperId}
     */
    match /previousYearPapers/{paperId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing feed posts.
     * @path /feed_posts/{postId}
     */
    match /feed_posts/{postId} {
        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;

      /**
       * @description Rules for managing comments on feed posts.
       * @path /feed_posts/{postId}/comments/{commentId}
       */
      match /comments/{commentId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && get(/databases/$(database)/documents/feed_posts/$(postId)).data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/feed_posts/$(postId)).data.authorId == request.auth.uid;
      }
    }

    /**
     * @description Rules for managing video notes.
     * @path /video_notes/{noteId}
     */
    match /video_notes/{noteId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for managing video chat messages.
     * @path /video_chat/{chatId}
     */
    match /video_chat/{chatId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for application-wide settings.
     * @path /settings/payment
     */
    match /settings/payment {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for managing scholarship centers.
     * @path /scholarship_centers/{centerId}
     */
    match /scholarship_centers/{centerId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Rules for managing scholarship payments.
     * @path /scholarshipPayments/{paymentId}
     */
    match /scholarshipPayments/{paymentId} {
        allow get: if true;
        allow list: if true;
        allow create, update, delete: if false;
    }

      /**
       * @description Rules for managing scholarship applications.
       * @path /scholarshipApplications/{applicationId}
       */
      match /scholarshipApplications/{applicationId} {
          allow get: if true;
          allow list: if true;
          allow create, update, delete: if false;
      }

       /**
        * @description Allows public read access to the courses collection, while restricting writes.
        * @path /courses
        * @allow (list): Any user can read the courses data.
        * @deny (create, update, delete): No user can create, update, or delete courses through direct Firestore access.
        * @principle Allows public access for reading course information.
        */
      match /courses {
        allow list: if true;
        allow get: if false;
        allow create, update, delete: if false;
      }
  }

  /**
   * @description Checks if the request is authenticated.
   * @return {bool} True if the request is authenticated, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the authenticated user is the owner of the resource.
   * @param {string} userId The user ID to compare against the authenticated user's UID.
   * @return {bool} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the authenticated user is the owner of the existing resource.
   * @param {string} userId The user ID to compare against the authenticated user's UID.
   * @return {bool} True if the user is the owner and the resource exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && resource.data.uid == userId;
  }
}