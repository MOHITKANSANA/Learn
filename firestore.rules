/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of public read access and owner-only write access
 *              for most top-level collections, with user-specific data nested under /users/{userId}.
 *              It assumes that all documents have an `id` property and leverages this to validate
 *              ownership.
 *
 * Data Structure:
 * - Top-level collections (e.g., /courses, /ebooks) are generally publicly readable.
 * - User-specific data is stored under /users/{userId} (e.g., /users/{userId}/cart).
 *
 * Key Security Decisions:
 * - Public Read Access: Many top-level collections are publicly readable to facilitate content discovery.
 * - Owner-Only Writes: Write access (create, update, delete) is generally restricted to the document owner.
 * - No User Listing: Listing all users is not permitted.
 *
 * Denormalization for Authorization:
 * - The rules rely on documents having an `id` field that matches the user's UID for authorization in
 *   user-specific collections.
 *
 * Structural Segregation:
 * - Private user data (e.g., cart items) is stored in subcollections under /users/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but only allows creating, updating, or deleting courses.
     * @path /courses/{courseId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read ebooks, but only allows creating, updating, or deleting ebooks.
     * @path /ebooks/{ebookId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read test series, but only allows creating, updating, or deleting test series.
     * @path /test_series/{testSeriesId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /test_series/{testSeriesId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read questions, but only allows creating, updating, or deleting questions.
     * @path /questions/{questionId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read educators, but only allows creating, updating, or deleting educators.
     * @path /educators/{educatorId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /educators/{educatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read live classes, but only allows creating, updating, or deleting live classes.
     * @path /live_classes/{liveClassId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /live_classes/{liveClassId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read, create, update, and delete their own user document.
     * @path /users/{studentId}
     * @allow get: if isOwner(studentId);
     * @allow list: if false;
     * @allow create: if isOwner(studentId);
     * @allow update: if isExistingOwner(studentId);
     * @allow delete: if isExistingOwner(studentId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{studentId} {
      allow get: if isOwner(studentId);
      allow list: if false;
      allow create: if isOwner(studentId);
      allow update: if isExistingOwner(studentId);
      allow delete: if isExistingOwner(studentId);

       /**
         * @description Allows a user to read, create, update, and delete their own cart items.
         * @path /users/{studentId}/cart/{bookId}
         * @allow get: if isOwner(studentId);
         * @allow list: if isOwner(studentId);
         * @allow create: if isOwner(studentId);
         * @allow update: if isExistingOwner(studentId);
         * @allow delete: if isExistingOwner(studentId);
         * @principle Enforces document ownership for writes.
         */
      match /cart/{bookId} {
          allow get: if isOwner(studentId);
          allow list: if isOwner(studentId);
          allow create: if isOwner(studentId);
          allow update: if isExistingOwner(studentId);
          allow delete: if isExistingOwner(studentId);
        }
    }

    /**
     * @description Allows anyone to read promotions, but only allows creating, updating, or deleting promotions.
     * @path /promotions/{promotionId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read enrollments, but only allows creating, updating, or deleting enrollments.
     * @path /enrollments/{enrollmentId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read books, but only allows creating, updating, or deleting books.
     * @path /books/{bookId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read book orders, but only allows creating, updating, or deleting book orders.
     * @path /bookOrders/{orderId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /bookOrders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read coupons, but only allows creating, updating, or deleting coupons.
     * @path /coupons/{couponId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read previous year papers, but only allows creating, updating, or deleting previous year papers.
     * @path /previousYearPapers/{paperId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /previousYearPapers/{paperId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read feed posts, but only allows creating, updating, or deleting feed posts.
     * @path /feed_posts/{postId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /feed_posts/{postId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;

        /**
         * @description Allows anyone to read comments, but only allows creating, updating, or deleting comments.
         * @path /feed_posts/{postId}/comments/{commentId}
         *  @allow get, list: if true;
         * @allow create: if false;
         * @allow update: if false;
         * @allow delete: if false;
         * @principle Public read, no write access.
         */
        match /comments/{commentId} {
          allow get, list: if true;
          allow create, update, delete: if false;
        }
    }

    /**
     * @description Allows anyone to read video notes, but only allows creating, updating, or deleting video notes.
     * @path /video_notes/{noteId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /video_notes/{noteId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read video chat messages, but only allows creating, updating, or deleting video chat messages.
     * @path /video_chat/{chatId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /video_chat/{chatId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows anyone to read settings, but only allows creating, updating, or deleting settings.
      * @path /settings/payment
      * @allow get: if true;
      * @allow list: if true;
      * @allow create: if false;
      * @allow update: if false;
      * @allow delete: if false;
      * @principle Public read, no write access.
      */
    match /settings/payment {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
   /**
    * @description Allows anyone to read scholarship centers, but only allows creating, updating, or deleting scholarship centers.
    * @path /scholarship_centers/{centerId}
    * @allow get, list: if true;
    * @allow create: if false;
    * @allow update: if false;
    * @allow delete: if false;
    * @principle Public read, no write access.
    */
    match /scholarship_centers/{centerId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship payments, but only allows creating, updating, or deleting scholarship payments.
     * @path /scholarshipPayments/{paymentId}
     * @allow get, list: if true;
     * @allow create: if false;
     * @allow update: if false;
     * @allow delete: if false;
     * @principle Public read, no write access.
     */
    match /scholarshipPayments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
    * @description Allows anyone to read scholarship applications, but only allows creating, updating, or deleting scholarship applications.
    * @path /scholarshipApplications/{applicationId}
    * @allow get, list: if true;
    * @allow create: if false;
    * @allow update: if false;
    * @allow delete: if false;
    * @principle Public read, no write access.
    */
    match /scholarshipApplications/{applicationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }


    /**
     * @description Checks if the requesting user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the document, and that the document exists.
     * @param userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}