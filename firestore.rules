/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of public read access and owner-based write access.
 *
 * Data Structure:
 * - Top-level collections (e.g., /courses, /ebooks) are generally publicly readable.
 * - User-specific data (e.g., /users/{userId}/cart) is restricted to the owning user.
 *
 * Key Security Decisions:
 * - Public read access is granted to most top-level collections to allow for open browsing of content.
 * - Writes (create, update, delete) are strictly controlled using the `isOwner()` function.
 * - The rules do not enforce any schema validation.
 *
 * Denormalization for Authorization:
 * - The rules rely on denormalized `userId` and `authorId` fields within documents to enforce ownership.
 *   This avoids costly `get()` calls to other documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but only allows authenticated users to create, update, or delete them.
     * @path /courses/{courseId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read ebooks, but only allows authenticated users to create, update, or delete them.
     * @path /ebooks/{ebookId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read test series, but only allows authenticated users to create, update, or delete them.
     * @path /test_series/{testSeriesId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /test_series/{testSeriesId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read questions, but only allows authenticated users to create, update, or delete them.
     * @path /questions/{questionId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read educators, but only allows authenticated users to create, update, or delete them.
     * @path /educators/{educatorId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /educators/{educatorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read live classes, but only allows authenticated users to create, update, or delete them.
     * @path /live_classes/{liveClassId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /live_classes/{liveClassId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Manages user-specific data, restricting access to the owner.
     * @path /users/{studentId}
     * @allow (get): if isOwner(studentId);
     * @allow (list): if false;
     * @allow (create): if isOwner(studentId);
     * @allow (update): if isExistingOwner(studentId);
     * @allow (delete): if isExistingOwner(studentId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{studentId} {
      allow get: if isOwner(studentId);
      allow list: if false;
      allow create: if isOwner(studentId);
      allow update: if isExistingOwner(studentId);
      allow delete: if isExistingOwner(studentId);
    }

    /**
     * @description Restricts cart access to the owning user.
     * @path /users/{studentId}/cart/{bookId}
     * @allow (get): if isOwner(studentId);
     * @allow (list): if isOwner(studentId);
     * @allow (create): if isOwner(studentId);
     * @allow (update): if isExistingOwner(studentId);
     * @allow (delete): if isExistingOwner(studentId);
     * @principle Enforces document ownership for writes.
     */
    match /users/{studentId}/cart/{bookId} {
      allow get: if isOwner(studentId);
      allow list: if isOwner(studentId);
      allow create: if isOwner(studentId);
      allow update: if isExistingOwner(studentId);
      allow delete: if isExistingOwner(studentId);
    }

    /**
     * @description Allows anyone to read promotions, but only allows authenticated users to create, update, or delete them.
     * @path /promotions/{promotionId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read enrollments, but only allows authenticated users to create, update, or delete them.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read books, but only allows authenticated users to create, update, or delete them.
     * @path /books/{bookId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read book orders, but only allows authenticated users to create, update, or delete them.
     * @path /bookOrders/{orderId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /bookOrders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read coupons, but only allows authenticated users to create, update, or delete them.
     * @path /coupons/{couponId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read previous year papers, but only allows authenticated users to create, update, or delete them.
     * @path /previousYearPapers/{paperId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /previousYearPapers/{paperId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read feed posts, but only allows authenticated users to create, update, or delete them.
     * @path /feed_posts/{postId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /feed_posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read comments, but only the author can write.
     * @path /feed_posts/{postId}/comments/{commentId}
     */
    match /feed_posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
     /**
     * @description Allows owner to read/write their notes.
     * @path /video_notes/{noteId}
     */
    match /video_notes/{noteId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read comments, but only the author can write.
     * @path /video_chat/{chatId}
     */
    match /video_chat/{chatId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read settings, but only allows authenticated users to create, update, or delete them.
     * @path /settings/payment
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /settings/payment {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read scholarship centers, but only allows authenticated users to create, update, or delete them.
     * @path /scholarship_centers/{centerId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /scholarship_centers/{centerId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read scholarship payments, but only allows authenticated users to create, update, or delete them.
     * @path /scholarshipPayments/{paymentId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /scholarshipPayments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows anyone to read scholarship applications, but only allows authenticated users to create, update, or delete them.
     * @path /scholarshipApplications/{applicationId}
     * @allow (get, list): if true;
     * @deny (create, update, delete): if false;
     * @principle Public read, owner-only writes.
     */
    match /scholarshipApplications/{applicationId} {
       allow get, list: if true;
       allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document based on the user ID.
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of an existing document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}