rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read courses, but restricts modifications.
     * @path /courses/{courseId}
     * @allow (get, list): Any user can read course data.
     * @deny (create, update, delete): Only the app can modify course data.
     * @principle Public read, owner-only writes
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read ebooks, but restricts modifications.
     * @path /ebooks/{ebookId}
     * @allow (get, list): Any user can read ebook data.
     * @deny (create, update, delete): Only the app can modify ebook data.
     * @principle Public read, owner-only writes
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read test series, but restricts modifications.
     * @path /test_series/{testSeriesId}
     * @allow (get, list): Any user can read test series data.
     * @deny (create, update, delete): Only the app can modify test series data.
     * @principle Public read, owner-only writes
     */
    match /test_series/{testSeriesId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read questions, but restricts modifications.
     * @path /questions/{questionId}
     * @allow (get, list): Any user can read question data.
     * @deny (create, update, delete): Only the app can modify question data.
     * @principle Public read, owner-only writes
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read educator profiles, but restricts modifications.
     * @path /educators/{educatorId}
     * @allow (get, list): Any user can read educator data.
     * @deny (create, update, delete): Only the app can modify educator data.
     * @principle Public read, owner-only writes
     */
    match /educators/{educatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read live class schedules, but restricts modifications.
     * @path /live_classes/{liveClassId}
     * @allow (get, list): Any user can read live class data.
     * @deny (create, update, delete): Only the app can modify live class data.
     * @principle Public read, owner-only writes
     */
    match /live_classes/{liveClassId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (create): User can create their own profile.
     * @allow (get, list, update, delete): User can read and modify their own profile.
     * @deny: Access denied for other users.
     * @principle Strict user-ownership
     */
    match /users/{userId} {
      allow get, list, update, delete: if isOwner(userId);
      allow create: if request.auth.uid == userId;
    }

    /**
     * @description Allows a user to manage their own cart items.
     * @path /users/{userId}/cart/{bookId}
     * @allow (get, list, create, update, delete): User can manage their own cart.
     * @deny: Access denied for other users.
     * @principle Strict user-ownership within a subcollection
     */
    match /users/{userId}/cart/{bookId} {
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read promotions, but restricts modifications.
     * @path /promotions/{promotionId}
     * @allow (get, list): Any user can read promotion data.
     * @deny (create, update, delete): Only the app can modify promotion data.
     * @principle Public read, owner-only writes
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read enrollments, but restricts modifications.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list): Any user can read enrollment data.
     * @deny (create, update, delete): Only the app can modify enrollment data.
     * @principle Public read, owner-only writes
     */
    match /enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read books, but restricts modifications.
     * @path /books/{bookId}
     * @allow (get, list): Any user can read book data.
     * @deny (create, update, delete): Only the app can modify book data.
     * @principle Public read, owner-only writes
     */
    match /books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read book orders, but restricts modifications.
     * @path /bookOrders/{orderId}
     * @allow (get, list): Any user can read book order data.
     * @deny (create, update, delete): Only the app can modify book order data.
     * @principle Public read, owner-only writes
     */
    match /bookOrders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read coupons, but restricts modifications.
     * @path /coupons/{couponId}
     * @allow (get, list): Any user can read coupon data.
     * @deny (create, update, delete): Only the app can modify coupon data.
     * @principle Public read, owner-only writes
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read previous year papers, but restricts modifications.
     * @path /previousYearPapers/{paperId}
     * @allow (get, list): Any user can read previous year paper data.
     * @deny (create, update, delete): Only the app can modify previous year paper data.
     * @principle Public read, owner-only writes
     */
    match /previousYearPapers/{paperId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read feed posts, but restricts modifications.
     * @path /feed_posts/{postId}
     * @allow (get, list): Any user can read feed post data.
     * @deny (create, update, delete): Only the app can modify feed post data.
     * @principle Public read, owner-only writes
     */
    match /feed_posts/{postId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read comments on feed posts, but restricts modifications.
     * @path /feed_posts/{postId}/comments/{commentId}
     * @allow (get, list): Any user can read comment data.
     * @deny (create, update, delete): Only the app can modify comment data.
     * @principle Public read, owner-only writes
     */
    match /feed_posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read video notes, but restricts modifications.
     * @path /video_notes/{noteId}
     * @allow (get, list): Any user can read video note data.
     * @deny (create, update, delete): Only the app can modify video note data.
     * @principle Public read, owner-only writes
     */
    match /video_notes/{noteId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read video chats, but restricts modifications.
     * @path /video_chat/{chatId}
     * @allow (get, list): Any user can read video chat data.
     * @deny (create, update, delete): Only the app can modify video chat data.
     * @principle Public read, owner-only writes
     */
    match /video_chat/{chatId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read payment settings, but restricts modifications.
     * @path /settings/payment
     * @allow (get, list): Any user can read payment setting data.
     * @deny (create, update, delete): Only the app can modify payment setting data.
     * @principle Public read, owner-only writes
     */
    match /settings/payment {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship centers, but restricts modifications.
     * @path /scholarship_centers/{centerId}
     * @allow (get, list): Any user can read scholarship center data.
     * @deny (create, update, delete): Only the app can modify scholarship center data.
     * @principle Public read, owner-only writes
     */
    match /scholarship_centers/{centerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship payments, but restricts modifications.
     * @path /scholarshipPayments/{paymentId}
     * @allow (get, list): Any user can read scholarship payment data.
     * @deny (create, update, delete): Only the app can modify scholarship payment data.
     * @principle Public read, owner-only writes
     */
    match /scholarshipPayments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship applications, but restricts modifications.
     * @path /scholarshipApplications/{applicationId}
     * @allow (get, list): Any user can read scholarship application data.
     * @deny (create, update, delete): Only the app can modify scholarship application data.
     * @principle Public read, owner-only writes
     */
    match /scholarshipApplications/{applicationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; //CRITICAL: No authorId field to validate
    }

    /**
     * @description Checks if the requesting user is the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} - True if the user ID matches the request's auth UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if a user is signed in.
     * @return {boolean} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}