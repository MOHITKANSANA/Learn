/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model, balancing open access for certain content with strict ownership and role-based access control where necessary.
 *
 * @data-structure
 * - Top-level collections like `courses`, `ebooks`, `test_series`, `educators`, `live_classes`, `promotions`, `books`, `previousYearPapers`, `scholarship_centers` are generally readable by all users.
 * - User-specific data is nested under `/users/{userId}`, including `cart` subcollections.
 * - Certain collections like `feed_posts` are readable by all, but writable only with valid user-specific ownership (`authorId`).
 * - Settings document at `/settings/payment` is readable by all but not writable, effectively making it a system-configured data.
 * - Scholarship related data, including payments and applications, is stored in top-level collections and tied to user IDs.
 *
 * @key-security-decisions
 * - Public Read Access:  Collections such as `courses`, `ebooks`, `test_series`, `educators`, `live_classes`, `promotions`, `books`, and `previousYearPapers` are readable by everyone.
 * - User Ownership:  The `/users/{userId}` path enforces strict user ownership. Only the authenticated user can read or write their own data.
 * - No User Listing: Listing all users is disallowed.
 * - Feed Posts: Enforce that `authorId` matches the authenticated user when creating feed posts.
 * - Scholarship Data: Enforce user-specific relationship between payments and applications.
 *
 * @denormalization-for-authorization
 * - Feed Posts: The `FeedPost` entity contains an `authorId` field, which is used to enforce ownership.
 *
 * @structural-segregation
 * - Private user data (cart) is stored under the `/users/{userId}` path, while public content (courses, ebooks, etc.) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read course information, but restricts writes.
     * @path /courses/{courseId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to course data.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read ebook information, but restricts writes.
     * @path /ebooks/{ebookId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to ebook data.
     */
    match /ebooks/{ebookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read test series information, but restricts writes.
     * @path /test_series/{testSeriesId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to test series data.
     */
    match /test_series/{testSeriesId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read question information, but restricts writes.
     * @path /questions/{questionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to question data.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read educator information, but restricts writes.
     * @path /educators/{educatorId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to educator data.
     */
    match /educators/{educatorId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read live class information, but restricts writes.
     * @path /live_classes/{liveClassId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to live class data.
     */
    match /live_classes/{liveClassId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces strict user ownership for user profiles.
     * @path /users/{studentId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete, list) User with matching ID can access and modify their profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @deny (get, update, delete, list) User cannot access or modify another user's profile.
     * @principle Enforces document ownership for user data.
     */
    match /users/{studentId} {
      allow get, update, delete, list: if isOwner(studentId);
      allow create: if isOwner(studentId);
    }

    /**
     * @description Allows the owner to manage their cart items.
     * @path /users/{studentId}/cart/{bookId}
     * @allow (create, get, update, delete, list) User with matching ID can manage cart items.
     * @deny (create, get, update, delete, list) User cannot manage another user's cart items.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{studentId}/cart/{bookId} {
      allow get, create, update, delete, list: if isOwner(studentId);
    }

    /**
     * @description Allows anyone to read promotion information, but restricts writes.
     * @path /promotions/{promotionId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to promotion data.
     */
    match /promotions/{promotionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read enrollment information, but restricts writes.
     * @path /enrollments/{enrollmentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to enrollment data.
     */
    match /enrollments/{enrollmentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read book information, but restricts writes.
     * @path /books/{bookId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to book data.
     */
    match /books/{bookId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Allows anyone to read previous year paper information, but restricts writes.
     * @path /previousYearPapers/{paperId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to previous year paper data.
     */
    match /previousYearPapers/{paperId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read a feed post, but only the author can write.
     * @path /feed_posts/{postId}
     * @allow (get, list)
     * @allow (create) If the authorId in the new document matches the user's ID.
     * @allow (update, delete) If the authorId in the existing document matches the user's ID and the document exists.
     * @deny (create) If the authorId does not match the user's ID.
     * @deny (update, delete) If the authorId does not match the user's ID or the document does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /feed_posts/{postId} {
      allow get, list: if true;
      allow create: if request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read a comment on a feed post, but restricts writes.
     * @path /feed_posts/{postId}/comments/{commentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access to comments.
     */
    match /feed_posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read a video note, but restricts writes.
     * @path /video_notes/{noteId}
     *  @allow get, list: if true;
     * @deny (create, update, delete)
     * @principle Public read access to comments.
     */
    match /video_notes/{noteId} {
       allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read a video chat message, but restricts writes.
     * @path /video_chat/{chatId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Public read access to comments.
     */
    match /video_chat/{chatId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Read-only access to payment settings.
     * @path /settings/payment
     * @allow (get) Anyone can read.
     * @deny (create, update, delete, list) No one can write.
     * @principle Provides public read access to application settings.
     */
    match /settings/payment {
      allow get: if true;
      allow create, update, delete, list: if false;
    }

    /**
     * @description Allows anyone to read book order information, but restricts writes.
     * @path /bookOrders/{orderId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to book order data.
     */
    match /bookOrders/{orderId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read coupon information, but restricts writes.
     * @path /coupons/{couponId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to coupon data.
     */
    match /coupons/{couponId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

   /**
     * @description Allows anyone to read scholarship center information, but restricts writes.
     * @path /scholarship_centers/{centerId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to scholarship center data.
     */
    match /scholarship_centers/{centerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship payment information, but restricts writes.
     * @path /scholarshipPayments/{paymentId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to scholarship payment data.
     */
    match /scholarshipPayments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read scholarship applications information, but restricts writes.
     * @path /scholarshipApplications/{applicationId}
     * @allow (get, list)
     * @deny (create, update, delete)
     * @principle Grants public read access to scholarship applications data.
     */
    match /scholarshipApplications/{applicationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}